// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Int from "bs-platform/lib/es6/belt_Int.js";
import * as ReactDOMRe from "reason-react/src/ReactDOMRe.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";

function fromInt(x) {
  var switcher = x - 1 | 0;
  if (switcher > 6 || switcher < 0) {
    if (x < 1) {
      return /* One */0;
    } else {
      return /* Seven */6;
    }
  } else {
    return switcher;
  }
}

function fromString(x) {
  switch (x) {
    case "1" :
        return /* One */0;
    case "2" :
        return /* Two */1;
    case "3" :
        return /* Three */2;
    case "4" :
        return /* Four */3;
    case "5" :
        return /* Five */4;
    case "6" :
        return /* Six */5;
    case "7" :
        return /* Seven */6;
    default:
      var match = Belt_Int.fromString(x);
      if (match !== undefined) {
        if (match < 1) {
          return /* One */0;
        } else {
          return /* Seven */6;
        }
      } else {
        return /* Three */2;
      }
  }
}

function toPx(param) {
  switch (param) {
    case /* One */0 :
        return "10px";
    case /* Two */1 :
        return "13px";
    case /* Three */2 :
        return "16px";
    case /* Four */3 :
        return "18px";
    case /* Five */4 :
        return "24px";
    case /* Six */5 :
        return "32px";
    case /* Seven */6 :
        return "48px";
    
  }
}

function add(a, b) {
  return fromInt((a + 1 | 0) + (b + 1 | 0) | 0);
}

function parseString(size, base) {
  var match = size.charAt(0);
  switch (match) {
    case "+" :
    case "-" :
        return toPx(add(fromString(size), base));
    default:
      return toPx(fromString(size));
  }
}

var empty = {
  color: undefined,
  face: undefined,
  size: undefined
};

function makeStyle(defaultProps, color, face, size) {
  var match = defaultProps.color;
  var colorStyle;
  var exit = 0;
  var color$1;
  if (color !== undefined) {
    color$1 = color;
    exit = 1;
  } else if (match !== undefined) {
    color$1 = match;
    exit = 1;
  } else {
    colorStyle = { };
  }
  if (exit === 1) {
    colorStyle = {
      color: color$1
    };
  }
  var match$1 = defaultProps.face;
  var faceStyle;
  var exit$1 = 0;
  var face$1;
  if (face !== undefined) {
    face$1 = face;
    exit$1 = 1;
  } else if (match$1 !== undefined) {
    face$1 = match$1;
    exit$1 = 1;
  } else {
    faceStyle = { };
  }
  if (exit$1 === 1) {
    faceStyle = {
      fontFamily: face$1
    };
  }
  var match$2 = defaultProps.size;
  var sizeStyle;
  if (size !== undefined) {
    var size$1 = size;
    sizeStyle = match$2 !== undefined ? ({
          fontSize: parseString(size$1, fromInt(match$2))
        }) : ({
          fontSize: parseString(size$1, /* Three */2)
        });
  } else {
    sizeStyle = match$2 !== undefined ? ({
          fontSize: toPx(fromInt(match$2))
        }) : ({ });
  }
  return ReactDOMRe.Style.combine(ReactDOMRe.Style.combine(colorStyle, faceStyle), sizeStyle);
}

var context = React.createContext(empty);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = context.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

function useContext(param) {
  return React.useContext(context);
}

function BASEFONT(Props) {
  var color = Props.color;
  var face = Props.face;
  var size = Props.size;
  var children = Props.children;
  var value = {
    color: color,
    face: face,
    size: size
  };
  return React.createElement(make, makeProps(value, React.createElement("div", {
                      style: makeStyle(empty, color, face, Belt_Option.map(size, (function (prim) {
                                  return String(prim);
                                })))
                    }, children), /* () */0));
}

var Size = {
  $$default: /* Three */2,
  fromInt: fromInt,
  parseString: parseString
};

var Font = {
  makeStyle: makeStyle,
  empty: empty
};

var make$1 = BASEFONT;

export {
  Size ,
  Font ,
  context ,
  Provider ,
  useContext ,
  make$1 as make,
  
}
/* context Not a pure module */
