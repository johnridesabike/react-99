// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Css from "bs-css/src/Css.js";
import * as React from "react";
import * as ReactDOMRe from "reason-react/src/ReactDOMRe.js";
import * as Belt_MapInt from "bs-platform/lib/es6/belt_MapInt.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";

var blinkStyle = Css.style(/* :: */[
      Css.animation(2000, undefined, undefined, /* linear */-325037595, undefined, undefined, /* infinite */-630647084, Css.keyframes(/* :: */[
                /* tuple */[
                  0,
                  /* :: */[
                    Css.visibility(/* hidden */-862584982),
                    /* [] */0
                  ]
                ],
                /* :: */[
                  /* tuple */[
                    50,
                    /* :: */[
                      Css.visibility(/* hidden */-862584982),
                      /* [] */0
                    ]
                  ],
                  /* :: */[
                    /* tuple */[
                      100,
                      /* :: */[
                        Css.visibility(/* visible */589592690),
                        /* [] */0
                      ]
                    ],
                    /* [] */0
                  ]
                ]
              ])),
      /* [] */0
    ]);

function React99$BLINK(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: blinkStyle
            }, children);
}

var BLINK = /* module */[
  /* blinkStyle */blinkStyle,
  /* make */React99$BLINK
];

function React99$CENTER(Props) {
  var children = Props.children;
  return React.createElement("div", {
              style: {
                textAlign: "center"
              }
            }, children);
}

var CENTER = /* module */[/* make */React99$CENTER];

var fontSizes = Belt_MapInt.fromArray(/* array */[
      /* tuple */[
        1,
        "10px"
      ],
      /* tuple */[
        2,
        "13px"
      ],
      /* tuple */[
        3,
        "16px"
      ],
      /* tuple */[
        4,
        "18px"
      ],
      /* tuple */[
        5,
        "24px"
      ],
      /* tuple */[
        6,
        "32px"
      ],
      /* tuple */[
        7,
        "48px"
      ]
    ]);

function parseSize(size, baseFontSize) {
  var match = size.charAt(0);
  var sizeIndex;
  switch (match) {
    case "+" : 
    case "-" : 
        sizeIndex = Caml_format.caml_int_of_string(size) + baseFontSize | 0;
        break;
    default:
      sizeIndex = Caml_format.caml_int_of_string(size);
  }
  var match$1 = Belt_Option.getWithDefault(Belt_MapInt.maximum(fontSizes), /* tuple */[
        7,
        "48px"
      ]);
  var match$2 = Belt_MapInt.get(fontSizes, sizeIndex);
  if (match$2 !== undefined) {
    return match$2;
  } else if (sizeIndex > match$1[0]) {
    return match$1[1];
  } else {
    return Belt_MapInt.getExn(fontSizes, 1);
  }
}

var emptyFont = {
  color: undefined,
  face: undefined,
  size: undefined
};

function makeFontStyle(color, face, size, defaultProps) {
  var match = defaultProps.color;
  var colorStyle;
  var exit = 0;
  var color$1;
  if (color !== undefined) {
    color$1 = color;
    exit = 1;
  } else if (match !== undefined) {
    color$1 = match;
    exit = 1;
  } else {
    colorStyle = { };
  }
  if (exit === 1) {
    colorStyle = {
      color: color$1
    };
  }
  var match$1 = defaultProps.face;
  var faceStyle;
  var exit$1 = 0;
  var face$1;
  if (face !== undefined) {
    face$1 = face;
    exit$1 = 1;
  } else if (match$1 !== undefined) {
    face$1 = match$1;
    exit$1 = 1;
  } else {
    faceStyle = { };
  }
  if (exit$1 === 1) {
    faceStyle = {
      fontFamily: face$1
    };
  }
  var match$2 = defaultProps.size;
  var sizeStyle;
  if (size !== undefined) {
    var size$1 = size;
    sizeStyle = match$2 !== undefined ? ({
          fontSize: parseSize(size$1, match$2)
        }) : ({
          fontSize: parseSize(size$1, 3)
        });
  } else {
    sizeStyle = match$2 !== undefined ? ({
          fontSize: Belt_MapInt.getExn(fontSizes, match$2)
        }) : { };
  }
  return ReactDOMRe.Style[/* combine */0](ReactDOMRe.Style[/* combine */0](colorStyle, faceStyle), sizeStyle);
}

var context = React.createContext(emptyFont);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = context.Provider;

var Provider = /* module */[
  /* makeProps */makeProps,
  /* make */make
];

function useContext(param) {
  return React.useContext(context);
}

function React99$BASEFONT(Props) {
  var color = Props.color;
  var face = Props.face;
  var size = Props.size;
  var children = Props.children;
  var value = {
    color: color,
    face: face,
    size: size
  };
  return React.createElement(make, makeProps(value, React.createElement("div", {
                      style: makeFontStyle(color, face, Belt_Option.map(size, (function (prim) {
                                  return String(prim);
                                })), emptyFont)
                    }, children), /* () */0));
}

var BASEFONT = /* module */[
  /* context */context,
  /* Provider */Provider,
  /* useContext */useContext,
  /* make */React99$BASEFONT
];

function React99$FONT(Props) {
  var color = Props.color;
  var face = Props.face;
  var size = Props.size;
  var children = Props.children;
  return React.createElement("span", {
              style: makeFontStyle(color, face, size, React.useContext(context))
            }, children);
}

var FONT = /* module */[/* make */React99$FONT];

var defaultFontSize = 3;

export {
  BLINK ,
  CENTER ,
  defaultFontSize ,
  fontSizes ,
  parseSize ,
  emptyFont ,
  makeFontStyle ,
  BASEFONT ,
  FONT ,
  
}
/* blinkStyle Not a pure module */
